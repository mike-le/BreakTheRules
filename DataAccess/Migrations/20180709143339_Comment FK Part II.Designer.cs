// <auto-generated />
using System;
using BTR.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(BTRContext))]
    [Migration("20180709143339_Comment FK Part II")]
    partial class CommentFKPartII
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BTR.DataAccess.Entities.CommentEntity", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentScore");

                    b.Property<string>("Message");

                    b.Property<string>("Owner");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("ParentCommentId");

                    b.Property<int?>("ParentIdeaId");

                    b.Property<DateTime>("SubmitDt");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ParentIdeaId");

                    b.ToTable("ApiComments");
                });

            modelBuilder.Entity("BTR.DataAccess.Entities.IdeaEntity", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<DateTime>("ModifiedDt");

                    b.Property<string>("Owner");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Score");

                    b.Property<int>("Status");

                    b.Property<DateTime>("SubmitDt");

                    b.Property<int>("ThemeId");

                    b.HasKey("PostId");

                    b.HasIndex("ThemeId");

                    b.ToTable("ApiIdeas");
                });

            modelBuilder.Entity("BTR.DataAccess.Entities.ThemeEntity", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CloseDt");

                    b.Property<string>("Description");

                    b.Property<DateTime>("OpenDt");

                    b.Property<string>("Owner");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Title");

                    b.HasKey("ThemeId");

                    b.ToTable("ApiThemes");
                });

            modelBuilder.Entity("BTR.DataAccess.Entities.CommentEntity", b =>
                {
                    b.HasOne("BTR.DataAccess.Entities.CommentEntity", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("BTR.DataAccess.Entities.IdeaEntity", "ParentIdea")
                        .WithMany("Comment")
                        .HasForeignKey("ParentIdeaId");
                });

            modelBuilder.Entity("BTR.DataAccess.Entities.IdeaEntity", b =>
                {
                    b.HasOne("BTR.DataAccess.Entities.ThemeEntity", "Theme")
                        .WithMany("Ideas")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
